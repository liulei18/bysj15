package com.edu.zzti.ass.testlibrary.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.edu.zzti.ass.core.model.PageInfo;
import com.edu.zzti.ass.testlibrary.dao.IJudgeDao;
import com.edu.zzti.ass.testlibrary.dao.ISingleselDao;
import com.edu.zzti.ass.testlibrary.dao.ISubjectiveDao;
import com.edu.zzti.ass.testlibrary.dao.ITJudgeDao;
import com.edu.zzti.ass.testlibrary.dao.ITSectorDao;
import com.edu.zzti.ass.testlibrary.dao.ITSingleselDao;
import com.edu.zzti.ass.testlibrary.dao.ITSubjectiveDao;
import com.edu.zzti.ass.testlibrary.dao.ITunitDao;
import com.edu.zzti.ass.testlibrary.model.Judge;
import com.edu.zzti.ass.testlibrary.model.Singlesel;
import com.edu.zzti.ass.testlibrary.model.Subjective;
import com.edu.zzti.ass.testlibrary.model.TJudge;
import com.edu.zzti.ass.testlibrary.model.TSinglesel;
import com.edu.zzti.ass.testlibrary.model.TSubjective;
import com.edu.zzti.ass.testlibrary.service.ITestPaperService;

@Service("testPaperService")
public class TestPaperServiceImpl implements ITestPaperService {
	@Autowired
	private ITunitDao unitDao;
	@Autowired
	private ITSectorDao sectorDao;
	@Autowired
	private ITJudgeDao tJudgeDao;
	@Autowired
	private ITSingleselDao tSingleselDao;
	@Autowired
	private ITSubjectiveDao tSubjectiveDao;
	@Autowired
	private IJudgeDao judgeDao;
	@Autowired
	private ISingleselDao singleselDao;
	@Autowired
	private ISubjectiveDao subjectiveDao;
	
	@Override
	public Map<String, List> find() {
		Map<String, List> map = new HashMap<String, List>();
		map.put("unit", unitDao.findAllUnit());
		map.put("sector", sectorDao.findAllSector());
		map.put("single", tSingleselDao.findAllSingle());
		map.put("judge", tJudgeDao.findAllJudge());
		map.put("subjective", tSubjectiveDao.findAllSubjective());
		return map;
	}

	@Override
	public void addTjudge(TJudge judge) {
		tJudgeDao.addJudge(judge);
	}

	@Override
	public void addTSinglesel(TSinglesel singlesel) {
		tSingleselDao.addSinglesel(singlesel);
	}

	@Override
	public void addTSubjective(TSubjective subjective) {
		tSubjectiveDao.addSubjective(subjective);
	}

	@Override
	public void deleteTJudge(Integer id) {
		tJudgeDao.deleteTjudge(id);
	}

	@Override
	public void deleteTSinglesel(Integer id) {
		tSingleselDao.deleteTSinglesel(id);

	}

	@Override
	public void deleteTSubjective(Integer id) {
		tSubjectiveDao.deleteTSubjective(id);

	}

	@Override
	public PageInfo findAll(int currentPage, String key, int type,Integer sectorId) {
		int count = 0;
		PageInfo pageInfo = new PageInfo();
		switch (type) {
		case 1:
			count = tJudgeDao.countTJudge(key,sectorId).intValue();
			break;
		case 2:
			count = tSingleselDao.countTSinglesel(key,sectorId).intValue();
			break;
		case 3:
			count = tSubjectiveDao.countTSubjective(key,sectorId).intValue();
			break;
		case 4:
			count = judgeDao.countJudge(key,sectorId).intValue();
			break;
		case 5:
			count = singleselDao.countSinglesel(key,sectorId).intValue();
			break;
		case 6:
			count = subjectiveDao.countSubjective(key,sectorId).intValue();
			break;
		}

		pageInfo.setTotalRecords(count);
		int totalPages = 0;
		if (count > 9) {
			totalPages = count % 10 == 0 ? (count / 10) : count / 10 + 1;
		} else {
			totalPages = 1;
		}
		pageInfo.setTotalPages(totalPages);
		pageInfo.setCurrentPage(currentPage > totalPages ? totalPages
				: currentPage);
		switch (type) {
		case 1:
			List<TJudge> list = tJudgeDao.getListByPage(currentPage, key,sectorId);
			for (TJudge judge : list) {
				judge.setQuestion(judge.getQuestion().length() > 40 ? judge
						.getQuestion().substring(0, 40) + "..." : judge
						.getQuestion());
				judge.setQuestion(judge.getQuestion().length() > 30 ? judge
						.getQuestion().substring(0, 30) + "..." : judge
						.getQuestion());
			}
			pageInfo.setData(list);
			break;
		case 2:
			List<TSinglesel> list1 = tSingleselDao.getListByPage(currentPage,
					key,sectorId);
			for (TSinglesel singlesel : list1) {
				singlesel
						.setQuestion(singlesel.getQuestion().length() > 40 ? singlesel
								.getQuestion().substring(0, 40) + "..."
								: singlesel.getQuestion());
				singlesel
						.setQuestion(singlesel.getQuestion().length() > 30 ? singlesel
								.getQuestion().substring(0, 30) + "..."
								: singlesel.getQuestion());
			}
			pageInfo.setData(list1);
			break;
		case 3:
			List<TSubjective> list2 = tSubjectiveDao.getListByPage(currentPage,
					key,sectorId);
			for (TSubjective subjective : list2) {
				subjective
						.setQuestion(subjective.getQuestion().length() > 40 ? subjective
								.getQuestion().substring(0, 40) + "..."
								: subjective.getQuestion());
				subjective
						.setQuestion(subjective.getQuestion().length() > 30 ? subjective
								.getQuestion().substring(0, 30) + "..."
								: subjective.getQuestion());
			}
			pageInfo.setData(list2);
			break;
		case 4:
			List<Judge> list3 = judgeDao.getListByPage(currentPage, key,sectorId);
			for (Judge judge : list3) {
				judge.setQuestion(judge.getQuestion().length() > 40 ? judge
						.getQuestion().substring(0, 40) + "..." : judge
						.getQuestion());
				judge.setQuestion(judge.getQuestion().length() > 30 ? judge
						.getQuestion().substring(0, 30) + "..." : judge
						.getQuestion());
			}
			pageInfo.setData(list3);
			break;
		case 5:
			List<Singlesel> list4 = singleselDao.getListByPage(currentPage, key,sectorId);
			for (Singlesel singlesel : list4) {
				singlesel.setQuestion(singlesel.getQuestion().length() > 40 ? singlesel
						.getQuestion().substring(0, 40) + "..." : singlesel
						.getQuestion());
				singlesel.setQuestion(singlesel.getQuestion().length() > 30 ? singlesel
						.getQuestion().substring(0, 30) + "..." : singlesel
						.getQuestion());
			}
			pageInfo.setData(list4);
			break;
		case 6:
			List<Subjective> list5 = subjectiveDao.getListByPage(currentPage,
					key,sectorId);
			for (Subjective subjective : list5) {
				subjective
						.setQuestion(subjective.getQuestion().length() > 40 ? subjective
								.getQuestion().substring(0, 40) + "..."
								: subjective.getQuestion());
				subjective
						.setQuestion(subjective.getQuestion().length() > 30 ? subjective
								.getQuestion().substring(0, 30) + "..."
								: subjective.getQuestion());
			}
			pageInfo.setData(list5);
			break;
		}
		return pageInfo;
	}

	@Override
	public TJudge getByIdTJudge(Integer id) {

			return tJudgeDao.getById(TJudge.class, id);
	}

	@Override
	public TSinglesel getByIdTSinglesel(Integer id) {
		// TODO Auto-generated method stub
		return tSingleselDao.getById(TSinglesel.class, id);
	}

	@Override
	public TSubjective getByIdTSubjective(Integer id) {
		
		return tSubjectiveDao.getById(TSubjective.class, id);
	}

	@Override
	public void addJudge(Judge judge) {
		judgeDao.addJudge(judge);
		
	}

	@Override
	public void addSinglesel(Singlesel singlesel) {
		singleselDao.addSinglesel(singlesel);
		
	}

	@Override
	public void addSubjective(Subjective subjective) {
		subjectiveDao.addSubjective(subjective);
		
	}

}
