package com.edu.zzti.ass.server.controller;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.edu.zzti.ass.server.model.AnswerInfo;
import com.edu.zzti.ass.server.model.PracticePaper;
import com.edu.zzti.ass.server.model.Unit;
import com.edu.zzti.ass.server.service.IPracticeService;

@Controller
@RequestMapping("/server/practice")
public class PracticeController {

	@Autowired
	private IPracticeService practiceService;
	
	@ResponseBody  
	@RequestMapping("allUnit")
	public List<Unit> getAllUnit(HttpServletResponse response){
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html;charset=UTF-8");
		List<Unit> units = practiceService.getUnits();
		return units;

	} 
	@ResponseBody  
	@RequestMapping(value = "praAdd",method = {RequestMethod.POST}  )
	public Integer praAdd(HttpServletRequest request) throws Exception{
		request.setCharacterEncoding("utf-8");
		String praName = request.getParameter("praName");
		Integer praDx = Integer.valueOf(request.getParameter("praDx")) ;
		Integer praPd = Integer.valueOf(request.getParameter("praPd"));
		Integer praJd = Integer.valueOf(request.getParameter("praJd"));
		String praCutTime = request.getParameter("praCutTime");
		String teacherId = request.getParameter("teacherId");
		Integer unitId = Integer.valueOf(request.getParameter("unitId"));
		String chapterIds = request.getParameter("chapterIds");
		String [] chapterIdArray = chapterIds.split(",");
		List<Integer> chapterIdList =new  ArrayList<Integer>();
		for(String id : chapterIdArray){
			chapterIdList.add(Integer.valueOf(id));
		}
		
		PracticePaper paper = practiceService.addPra(praName,praDx,praPd,praJd,praCutTime,teacherId,unitId,chapterIdList);
		Integer paperId = paper.getId();
		return paperId;
	}
	
	@RequestMapping(value = "prePaper/{id}", method = { RequestMethod.GET })
	public ModelAndView prePaper(@PathVariable Integer id) {
		ModelAndView mav = new ModelAndView();
		PracticePaper paper = practiceService.getPaper(id);
		mav.addObject("paper", paper);
		mav.setViewName("prePractice");
		return mav;
	}
	
	@RequestMapping(value = "usePaper/{id}/{type}", method = { RequestMethod.GET })
	public ModelAndView usePaper(@PathVariable Integer id,@PathVariable Integer type) {
		ModelAndView mav = new ModelAndView();
		int i = practiceService.deal(id,type);
		if(i==0){
			mav.addObject("info", "此练习已经删除！");
			mav.setViewName("info");
		}else{
			mav.addObject("info", "此练习已经可以使用！");
			mav.setViewName("info");
		}
		return mav;
	}
	@RequestMapping(value = "intoPaper/{id}", method = { RequestMethod.GET })
	public ModelAndView intoPaper(@PathVariable Integer id) {
		ModelAndView mav = new ModelAndView();
		PracticePaper paper = practiceService.getPaper(id);
		mav.addObject("paper", paper);
		mav.addObject("singNum", paper.getSinglesels().size());
		mav.addObject("judgeNum", paper.getJudges().size());
		mav.setViewName("intoPractice");
		return mav;
	}
	
	@RequestMapping(value = "saveInfo", method = { RequestMethod.POST })
	public ModelAndView saveInfo(HttpServletRequest request) {
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView();
		Integer paperid = Integer.valueOf(request.getParameter("paperid"));
		PracticePaper paper  =  practiceService.getPaper(paperid);
		List<String> singleValues = new ArrayList<>();
		for(int i = 0 ;i<paper.getSinglesels().size();i++){
			singleValues.add(request.getParameter("sing"+i));
		}
		List<String> judgeValues = new ArrayList<>();
		for(int i = 0 ;i<paper.getJudges().size();i++){
			judgeValues.add(request.getParameter("judge"+i));
		}
		List<String> subValues = new ArrayList<>();
		for(int i = 0 ;i<paper.getSubjective().size();i++){
			subValues.add(request.getParameter("sub"+i));
		}
		int count  =  singleValues.size()+judgeValues.size();
		String singStr =paper.getPracticeAnswer().getSingleAnswers();
		String judgeStr = paper.getPracticeAnswer().getJudgeAnswers();
		String[] sings = singStr.split(",");
		String[] judges = judgeStr.split(",");
		int k = 0;
		for(int i = 0 ;i<singleValues.size();i++){
			if(singleValues.get(i).equals(sings[i])){
				k++;
			}
		}
		for(int i = 0 ;i<judgeValues.size();i++){
			if(judgeValues.get(i).equals(judges[i])){
				k++;
			}
		}
		int info = k*100/count;
		AnswerInfo answerInfo = new AnswerInfo();
		answerInfo.setInfo(info);
		StringBuffer sb = new StringBuffer();
		for(String sing :singleValues){
			sb.append(sing+",");
		}
		sb.deleteCharAt(sb.length()-1);
		answerInfo.setSingleAnswers(sb.toString());
		sb.setLength(0);
		
		for(String judge :judgeValues){
			sb.append(judge+",");
		}
		sb.deleteCharAt(sb.length()-1);
		answerInfo.setJudgeAnswers(sb.toString());
		sb.setLength(0);
		
		for(String sub:subValues){
			sb.append(sub+"|||");
		}
		sb.delete(sb.length()-3, sb.length());
		answerInfo.setSubjectAnswers(sb.toString());
		answerInfo.setCreateDate(new Date());
		answerInfo.setUnit(paper.getUnit());
		answerInfo.setPaper(paper);
		
		
		mav.addObject("info", "练习已经提交！");
		mav.setViewName("info");
		return mav;
	}
	
}
